{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGriditem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGriditem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAkB9C,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAA+BO,OAC7CN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEDI,MAAMF,GAFL,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAIQ,EAAIG,OAAOC,iBAAiBZ,QATrB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAClC,OACI,sBAAKc,UAAU,uCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAKN,IACtB,4BAAIA,QCFHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAH0B,mBAC/BC,EAD+B,KACxBC,EADwB,KAiBtC,OAXAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAAAC,GAEnBH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAIlB,CAACpB,IAEIqB,EDduBK,CAAa1B,GAApCoB,EAF4B,EAE5BA,QAAaP,EAFe,EAEpBN,KAEf,OACI,qCACI,6BAAKP,IACHoB,GAAW,yCACb,qBAAKJ,UAAU,YAAf,SAGQH,EAAOJ,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEgBtBgB,EA7BM,WAAO,IAAD,EAEazC,mBAAS,CAAC,eAFvB,mBAEhBQ,EAFgB,KAEJT,EAFI,KAQvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAGA,6BAEQS,EAAWe,KAAI,SAACT,GAAD,OACX,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCjBjC4B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.7ee8d3f1.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        if(inputValue.trim().length > 2){\n            setCategories((categories) => [inputValue,...categories])\n            setInputValue('')\n        }\n\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories:PropTypes.func.isRequired\n}\n\n","export const getGifs = async(category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&api_key=VEIS5R4FhMK1AcNC7ciovX01kJpVpL8M&limit=10`;\n    const resp =await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map( img  => {\n        return {\n            id:img.id,\n            title:img.title,\n            url:img.images.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGriditem = ({id,title,url}) => {\n    return (\n        <div className=\"card animate__animated animate__flip\">\n            <img src={ url } alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGriditem } from './GifGriditem';\n\nexport const GifGrid = ({category}) => {\n\n    const {loading,data:images} = useFetchGifs(category);\n\n    return (\n        <>\n            <h3>{category}</h3>\n            { loading && <p>Cargando</p>}\n            <div className=\"card-grid\">\n\n                {\n                    images.map((img) => (\n                        <GifGriditem \n                            key={img.id}\n                            {...img}\n                        />\n                    ))\n                }\n\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data:[],\n        loading:true\n    })\n\n    useEffect(() => {\n        getGifs(category).then(imgs => {\n\n            setState({\n                data:imgs,\n                loading:false\n            })\n        \n        })\n    },[category]);\n\n    return state;\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['One Pounch']);\n\n    // const handleAdd = () => {\n    //     setCategories([...categories,'Pokemon']);\n    // }\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories } /> \n            <hr/>\n\n\n            <ol>\n                {\n                    categories.map((category) => ( \n                        <GifGrid \n                            key={category}\n                            category={category} \n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}